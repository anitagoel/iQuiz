# Generated by Django 2.1.5 on 2019-01-27 05:04

from django.db import migrations, models
import django.db.models.deletion
import quiz.models.custom_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LTIUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userId', models.CharField(help_text='User ID as in the LTI Launch Request', max_length=100)),
                ('name', models.CharField(blank=True, help_text='Name of the user if available/given.', max_length=100)),
                ('email', models.CharField(blank=True, help_text='Email of the student if provided', max_length=100)),
                ('role', models.CharField(help_text='Role of the user', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.PositiveIntegerField(default=1, verbose_name='Serial Number')),
                ('group_number', models.PositiveIntegerField(default=1, verbose_name='Group Number')),
                ('draft_statement', models.TextField(default='The statement part of the question', null=True)),
                ('draft_options_data', models.TextField(null=True)),
                ('draft_expected_response', models.TextField(null=True)),
                ('statement', models.TextField(null=True)),
                ('options_data', models.TextField(null=True)),
                ('expected_response', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resourceLinkId', models.CharField(help_text='Resource_link_id', max_length=100)),
                ('contextId', models.CharField(help_text='Context Id: Unique for each term (run) of the course', max_length=200)),
                ('createdOn', models.DateTimeField(auto_now_add=True)),
                ('updatedOn', models.DateTimeField(auto_now_add=True)),
                ('quizName', models.CharField(blank=True, max_length=100)),
                ('isArchived', models.BooleanField(default=True, help_text='Set to True if the Quiz has been archived')),
                ('isEverAttempted', models.BooleanField(default=False, help_text='Set to True if the Quiz has been attempted by at least one student')),
            ],
            options={
                'get_latest_by': 'createdOn',
            },
        ),
        migrations.CreateModel(
            name='QuizManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.LTIUser')),
            ],
        ),
        migrations.CreateModel(
            name='QuizSettings',
            fields=[
                ('quiz', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='quiz.Quiz')),
                ('deadline', models.DateTimeField(blank=True, help_text='Set the deadline for the Quiz. Leave blank if not required', null=True, verbose_name='Deadline')),
                ('duration', quiz.models.custom_fields.IntegerRangeField(blank=True, default=30, help_text='Set the duration of quiz in minutes. Leave blank if timer is not required', null=True, verbose_name='Duration')),
                ('timeBetweenAttempt', quiz.models.custom_fields.IntegerRangeField(default=0, help_text='Set the time between the two consecutive attempts (Only for graded)', null=True, verbose_name='Time Between Attempts')),
                ('maxAttempts', quiz.models.custom_fields.IntegerRangeField(blank=True, help_text='Set the maximum number of allowed attempts. Leave blank for unlimited attempts.(Only for graded) ', null=True, verbose_name='Maximum Attempts')),
                ('graded', models.BooleanField(default=False, help_text='Set whether the quiz is graded', verbose_name='Graded')),
            ],
        ),
        migrations.AddField(
            model_name='quizmanager',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.Quiz'),
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.Quiz'),
        ),
    ]
